grammar StarRealms;
battle           : turn+ EOF ;
turn             : action+ endTurn NEWLINE ;
endTurn          : WORD+ turnCount ;
turnCount        : INT;
action           : summaryAction NEWLINE actionDetail* ;
summaryAction    : play | purchase | attack | scrap ;
play             : (PLAY ALL) | playSingle;
playSingle       : PLAYED card;
purchase         : ACQUIRED card ;
attack           : ATTACKED name WORD INT newAuthority;
scrap            : (name IS SCRAPPING ':' card) | (SCRAPPING card);
actionDetail     : (scrapDetail | newBalanceDetail) NEWLINE;
scrapDetail      : SCRAPPED card ;
newBalanceDetail : name SEPARATOR card? effect balance ;
effect           : (INCREMENT | DECREASE) category ;
balance          : '('category':'INT')' ;
category         : (TRADE | COMBAT | AUTHORITY) ;
newAuthority     : '(' NEW category':'INT')' ;
name             : WORD+ ;
card             : WORD+ ;

fragment A : ('A'|'a');
fragment B : ('B'|'b');
fragment C : ('C'|'c');
fragment D : ('D'|'d');
fragment E : ('E'|'e');
fragment G : ('G'|'g');
fragment H : ('H'|'h');
fragment I : ('I'|'i');
fragment K : ('K'|'k');
fragment L : ('L'|'l');
fragment M : ('M'|'m');
fragment N : ('N'|'n');
fragment O : ('O'|'o');
fragment P : ('P'|'p');
fragment Q : ('Q'|'q');
fragment R : ('R'|'r');
fragment S : ('S'|'s');
fragment T : ('T'|'t');
fragment U : ('U'|'u');
fragment W : ('W'|'w');
fragment Y : ('Y'|'y');

TRADE               : T R A D E ;
COMBAT              : C O M B A T ;
AUTHORITY           : A U T H O R I T Y ;
ACQUIRED            : A C Q U I R E D ;
ATTACKED            : A T T A C K E D ;
SCRAPPING           : S C R A P P I N G ;
SCRAPPED            : S C R A P P E D ;
PLAY                : P L A Y ;
NEW                 : N E W ;
ALL                 : A L L ;
IS                  : I S ;
PLAYED              : 'Played' ;
INT                 : [0-9]+ ;
fragment LETTER     : [A-Za-z] ;
WORD                : LETTER+ ;
SEPARATOR           : '>' | '-' ;
INCREMENT           : '+'INT ;
DECREASE            : '-'INT ;
NEWLINE             : ('\r'? '\n' | '\r')+ ;
WHITESPACE          : (' ' | '\t') -> skip;
TAG                 : '<'~[>]*'>' -> skip;